import os
import requests
from flask import Flask, request
from threading import Thread
import time
import sys
import re

# Configuração do token da API do IPinfo
API_TOKEN = "49e23b013f664c"

# Inicialização do Flask para capturar IPs
app = Flask(__name__)
captured_ips = []

# Configuração de idiomas
IDIOMA = "pt"  # Altere para "en" para inglês
MENSAGENS = {
    "pt": {
        "menu": "Escolha uma opção: ",
        "saindo": "Saindo...",
        "localizar": "Localizar informações de um IP",
        "opcoes": [
            "1. Localizar informações de um IP",
            "2. Gerar link para captura de IP",
            "3. Exibir IPs capturados",
            "4. Instalar dependências",
            "5. Modo educacional",
            "6. Mostrar manual",
            "7. Sair"
        ],
    },
    "en": {
        "menu": "Choose an option: ",
        "saindo": "Exiting...",
        "localizar": "Locate IP Information",
        "opcoes": [
            "1. Locate IP Information",
            "2. Generate IP Capture Link",
            "3. Show Captured IPs",
            "4. Install dependencies",
            "5. Educational Mode",
            "6. Show Manual",
            "7. Exit"
        ],
    }
}

# Cores
GREEN = '\033[92m'
RESET = '\033[0m'
BOLD = '\033[1m'

def limpar_tela():
    os.system("clear" if os.name != "nt" else "cls")

def instalar_dependencias():
    limpar_tela()
    print(GREEN + "=== Instalando Dependências ===" + RESET)
    os.system("pkg update && pkg upgrade -y || sudo apt update && sudo apt upgrade -y")
    os.system("pkg install python openssh -y || sudo apt install python3 openssh-client -y")
    os.system("pip install flask requests")
    print(GREEN + "\nDependências instaladas com sucesso!" + RESET)

def salvar_relatorio(resultado):
    with open("relatorio_ips.txt", "a") as arquivo:
        arquivo.write(resultado + "\n")
    print(GREEN + "\nRelatório salvo em 'relatorio_ips.txt'!" + RESET)

def validar_ip(ip):
    padrao = r"^\d{1,3}(\.\d{1,3}){3}$"
    if re.match(padrao, ip):
        return True
    print(RESET + "IP inválido. Por favor, insira um IP válido.")
    return False

def get_ip_location(ip):
    url = f"https://ipinfo.io/{ip}?token={API_TOKEN}"
    try:
        response = requests.get(url)
        data = response.json()
        
        if 'bogon' in data:
            return "Este IP é reservado (bogon) e não tem localização precisa."
        
        ip = data.get("ip", "Desconhecido")
        cidade = data.get("city", "Desconhecida")
        regiao = data.get("region", "Desconhecida")
        pais = data.get("country", "Desconhecido")
        org = data.get("org", "Desconhecida")
        postal = data.get("postal", "Desconhecido")
        loc = data.get("loc", "0,0")
        latitude, longitude = loc.split(",")
        
        resultado = (
            f"IP: {ip}\n"
            f"Cidade: {cidade}\n"
            f"Região: {regiao}\n"
            f"País: {pais}\n"
            f"Código Postal: {postal}\n"
            f"Organização: {org}\n"
            f"Latitude: {latitude}\n"
            f"Longitude: {longitude}\n"
            f"Mapa: https://www.google.com/maps?q={latitude},{longitude}\n"
        )
        return resultado
    except Exception as e:
        return f"Erro ao obter informações do IP: {str(e)}"

@app.route("/")
def capture_ip():
    ip = request.remote_addr
    captured_ips.append(ip)
    return f"Seu IP foi registrado: {ip}"

def start_flask():
    app.run(host="0.0.0.0", port=5000)

def start_serveo():
    os.system("ssh -R 80:localhost:5000 serveo.net")

def mostrar_manual():
    print(GREEN + """
Manual de Uso:
- Escolha opções no menu para localizar IPs, gerar links e capturar informações.
- Utilize 'Instalar Dependências' na primeira execução.
""" + RESET)

def modo_educacional():
    print(GREEN + """
Modo Educacional:
1. Geolocalização por IP: Coleta informações como país e cidade de um endereço IP.
2. Tunelamento Serveo: Exposição de servidores locais para acesso externo.
""" + RESET)

def animacao_inicio():
    limpar_tela()
    texto = GREEN + """
=== Bem-vindo ao Localizador.AO ===
Desenvolvido por Hacker Ético Milton Diogo.
Nota: Apenas para fins educacionais.
""" + RESET
    print(texto)
    time.sleep(3)

def mostrar_autor():
    print(GREEN + "\n" + "=" * 50)
    print("© 2024 Hacker Ético Milton Diogo".center(50))
    print("Ferramenta para fins educacionais".center(50))
    print("=" * 50 + RESET)

def menu():
    while True:
        limpar_tela()
        mostrar_autor()
        for opcao in MENSAGENS[IDIOMA]["opcoes"]:
            print(GREEN + opcao + RESET)
        escolha = input(MENSAGENS[IDIOMA]["menu"])

        if escolha == "1":
            limpar_tela()
            print(GREEN + MENSAGENS[IDIOMA]["localizar"] + RESET)
            ip = input("Digite o endereço IP (ou pressione Enter para usar seu IP público): ")
            if not ip or validar_ip(ip):
                resultado = get_ip_location(ip)
                print("\n" + resultado)
                salvar_relatorio(resultado)
            input(GREEN + "\nPressione Enter para voltar ao menu..." + RESET)
        elif escolha == "2":
            start_flask()
            start_serveo()
        elif escolha == "3":
            print("\nIPs capturados:")
            print("\n".join(captured_ips))
            input(GREEN + "\nPressione Enter para voltar ao menu..." + RESET)
        elif escolha == "4":
            instalar_dependencias()
        elif escolha == "5":
            modo_educacional()
            input(GREEN + "\nPressione Enter para voltar ao menu..." + RESET)
        elif escolha == "6":
            mostrar_manual()
            input(GREEN + "\nPressione Enter para voltar ao menu..." + RESET)
        elif escolha == "7":
            print(GREEN + MENSAGENS[IDIOMA]["saindo"] + RESET)
            break

if __name__ == "__main__":
    animacao_inicio()
    menu()
